name: Claude AI Auto Review & Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    outputs:
      test-status: ${{ steps.test-result.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with detailed output
        id: test-result
        run: |
          echo "Running comprehensive test suite..."
          if npm test; then
            echo "✅ All tests passed successfully"
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Tests failed - see output above"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  claude-review-and-merge:
    runs-on: ubuntu-latest
    name: Claude AI Review & Auto Merge
    needs: test
    if: github.event_name == 'pull_request' && needs.test.outputs.test-status == 'passed'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files with details
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.ts
            **/*.js
            **/*.tsx
            **/*.jsx
            **/*.json
            **/*.md

      - name: Setup Node.js for review
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies for review
        run: |
          echo "Setting up review environment..."
          npm init -y
          npm install @anthropic-ai/sdk

      - name: Create package.json for review script
        run: |
          echo '{
            "name": "claude-review",
            "version": "1.0.0",
            "type": "commonjs",
            "dependencies": {
              "@anthropic-ai/sdk": "latest"
            }
          }' > package.json

      - name: Create secure HTTP module
        run: |
          cat > http-utils.js << 'EOF'
          const https = require('https');
          
          async function secureRequest(url, options = {}) {
            return new Promise((resolve, reject) => {
              const urlObj = new URL(url);
              const requestOptions = {
                hostname: urlObj.hostname,
                port: urlObj.port || 443,
                path: urlObj.pathname + urlObj.search,
                method: options.method || 'GET',
                headers: {
                  'User-Agent': 'claude-review-bot/1.0',
                  ...options.headers
                },
                rejectUnauthorized: true,
                timeout: 30000
              };

              const req = https.request(requestOptions, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  try {
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                      resolve(JSON.parse(data));
                    } else {
                      reject(new Error(`HTTP ${res.statusCode}: ${data}`));
                    }
                  } catch (error) {
                    reject(new Error(`Parse error: ${error.message}`));
                  }
                });
              });

              req.on('error', reject);
              req.on('timeout', () => {
                req.destroy();
                reject(new Error('Request timeout'));
              });

              if (options.body) {
                req.write(options.body);
              }
              req.end();
            });
          }

          module.exports = { secureRequest };
          EOF

      - name: Create main review script
        run: |
          cat > claude-review.js << 'EOF'
          const Anthropic = require('@anthropic-ai/sdk');
          const { execSync } = require('child_process');
          const { secureRequest } = require('./http-utils');

          async function runClaudeReview() {
            try {
              console.log('🚀 Starting Claude AI review process...');
              
              // Validate environment
              const required = ['ANTHROPIC_API_KEY', 'GITHUB_TOKEN', 'PR_NUMBER', 'REPO_OWNER', 'REPO_NAME'];
              for (const env of required) {
                if (!process.env[env]) {
                  throw new Error(`Missing environment variable: ${env}`);
                }
              }

              const anthropic = new Anthropic({
                apiKey: process.env.ANTHROPIC_API_KEY,
              });

              console.log('✅ Environment validated');

              const changedFiles = process.env.CHANGED_FILES?.split(' ') || [];
              console.log(`📁 Changed files: ${changedFiles.length}`);
              
              if (changedFiles.length === 0) {
                await postComment('## 🤖 Claude AIレビュー\n\n**結果**: 変更対象ファイルなし\n\n**判定**: APPROVE');
                return;
              }

              console.log('📊 Analyzing code changes...');
              let gitDiff;
              try {
                gitDiff = execSync('git diff origin/main...HEAD', { encoding: 'utf8', maxBuffer: 1024 * 1024 });
              } catch (error) {
                gitDiff = 'Git diff error: ' + error.message;
              }

              const maxSize = 8000;
              const diff = gitDiff.length > maxSize 
                ? gitDiff.substring(0, maxSize) + '\n[... truncated ...]'
                : gitDiff;

              console.log(`📝 Diff size: ${gitDiff.length} chars (sending ${diff.length})`);

              console.log('📋 Fetching PR information...');
              const prData = await secureRequest(
                `https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/pulls/${process.env.PR_NUMBER}`,
                {
                  headers: {
                    'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json'
                  }
                }
              );

              console.log(`✅ PR data fetched: "${prData.title}"`);

              const prompt = `# 大相撲アプリ コードレビュー

あなたは経験豊富なシニアエンジニアです。以下のPRをレビューしてください。

## PR情報
- タイトル: ${prData.title || 'No title'}
- 作成者: ${prData.user?.login || 'Unknown'}
- 説明: ${prData.body || '説明なし'}
- 変更ファイル数: ${changedFiles.length}

## 変更内容
\`\`\`diff
${diff}
\`\`\`

## レビュー基準
1. **コード品質**: TypeScript型安全性、可読性、保守性
2. **セキュリティ**: 入力値検証、XSS/CSRF対策
3. **パフォーマンス**: 効率的な実装
4. **テスト**: 適切なテストカバレッジ
5. **大相撲アプリ固有**: 力士データ整合性、番付表示正確性

## 判定基準
- **APPROVE**: 軽微な改善提案のみ、品質・セキュリティ問題なし
- **REQUEST_CHANGES**: 修正必須の問題あり
- **COMMENT**: 設計相談や大きな改善提案

## 出力形式
最初の行に必ず以下を出力:
**DECISION: [APPROVE/REQUEST_CHANGES/COMMENT]**

その後、具体的なレビュー内容を記載してください。`;

              console.log('🤖 Requesting Claude AI review...');
              
              const response = await anthropic.messages.create({
                model: 'claude-3-5-sonnet-20241022',
                max_tokens: 3000,
                messages: [{ role: 'user', content: prompt }]
              });

              const reviewComment = response.content[0].text;
              console.log('✅ Claude AI review completed');

              const decisionLine = reviewComment.split('\n').find(line => line.includes('DECISION:')) || reviewComment.split('\n')[0];
              
              let decision = 'COMMENT';
              if (decisionLine.includes('DECISION: APPROVE')) {
                decision = 'APPROVE';
              } else if (decisionLine.includes('DECISION: REQUEST_CHANGES')) {
                decision = 'REQUEST_CHANGES';
              }

              console.log(`📋 Review decision: ${decision}`);

              const commentBody = `## 🤖 Claude AIレビュー（改善版）

${reviewComment}

---
### 📊 レビュー情報
- **判定**: ${decision}
- **実行時刻**: ${new Date().toISOString()}
- **変更ファイル数**: ${changedFiles.length}
- **セキュリティ強化**: ✅ TLS 1.2, タイムアウト設定
- **エラーハンドリング**: ✅ 包括的な例外処理

*Claude AI Sonnet 3.5 改善版による自動レビュー*`;

              await postComment(commentBody);
              console.log('✅ Review comment posted successfully');
              console.log(`🎯 Review completed: ${decision}`);
              
            } catch (error) {
              console.error('❌ Review error:', error);
              
              try {
                await postComment(`## 🤖 Claude AIレビュー - エラー

レビュー中にエラーが発生しました:

\`${error.message}\`

**対応**: 手動レビューをお願いします。

*エラー時刻: ${new Date().toISOString()}*`);
              } catch (commentError) {
                console.error('Failed to post error comment:', commentError);
              }
              
              process.exit(1);
            }
          }

          async function postComment(body) {
            await secureRequest(
              `https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/issues/${process.env.PR_NUMBER}/comments`,
              {
                method: 'POST',
                headers: {
                  'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.v3+json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ body })
              }
            );
          }

          runClaudeReview();
          EOF

      - name: Execute Claude AI Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          echo "🚀 Starting Claude AI review execution..."
          node claude-review.js
          echo "✅ Claude AI review execution completed"

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [test, claude-review-and-merge]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
