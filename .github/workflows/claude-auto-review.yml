name: Claude AI Auto Review & Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    outputs:
      test-status: ${{ steps.test-result.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with detailed output
        id: test-result
        run: |
          echo "Running comprehensive test suite..."
          if npm test; then
            echo "✅ All tests passed successfully"
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Tests failed - see output above"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  claude-review-and-merge:
    runs-on: ubuntu-latest
    name: Claude AI Review & Auto Merge
    needs: test
    if: github.event_name == 'pull_request' && needs.test.outputs.test-status == 'passed'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.ts
            **/*.js
            **/*.tsx
            **/*.jsx
            **/*.json
            **/*.md

      - name: Setup Node.js for review
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install review dependencies
        run: |
          npm init -y
          npm install @anthropic-ai/sdk

      - name: Run Claude 4 Sonnet Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          node -e "
          const Anthropic = require('@anthropic-ai/sdk');
          const { execSync } = require('child_process');
          const https = require('https');

          function httpRequest(url, options = {}) {
            return new Promise((resolve, reject) => {
              const urlObj = new URL(url);
              const req = https.request({
                hostname: urlObj.hostname,
                port: 443,
                path: urlObj.pathname + urlObj.search,
                method: options.method || 'GET',
                headers: { 'User-Agent': 'claude-bot', ...options.headers },
                timeout: 30000
              }, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  try {
                    resolve(res.statusCode < 300 ? JSON.parse(data) : Promise.reject(new Error(data)));
                  } catch(e) { reject(e); }
                });
              });
              req.on('error', reject);
              if (options.body) req.write(options.body);
              req.end();
            });
          }

          async function review() {
            try {
              console.log('🚀 Starting Claude 4 Sonnet review...');
              
              const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });
              const files = (process.env.CHANGED_FILES || '').split(' ').filter(Boolean);
              
              console.log('📁 Changed files: ' + files.length);
              
              if (files.length === 0) {
                await httpRequest('https://api.github.com/repos/' + process.env.REPO_OWNER + '/' + process.env.REPO_NAME + '/issues/' + process.env.PR_NUMBER + '/comments', {
                  method: 'POST',
                  headers: {
                    'Authorization': 'token ' + process.env.GITHUB_TOKEN,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ body: '## 🤖 Claude 4 Sonnet AIレビュー\\n\\n**結果**: 変更対象ファイルなし\\n\\n**判定**: APPROVE' })
                });
                return;
              }

              let diff;
              try {
                diff = execSync('git diff origin/main...HEAD', { encoding: 'utf8', maxBuffer: 1024*1024 });
              } catch(e) {
                diff = 'Git diff error: ' + e.message;
              }

              const maxSize = 6000;
              const truncatedDiff = diff.length > maxSize ? diff.substring(0, maxSize) + '\\n[...truncated...]' : diff;

              console.log('📊 Diff size: ' + diff.length + ' chars (sending ' + truncatedDiff.length + ')');

              const prData = await httpRequest('https://api.github.com/repos/' + process.env.REPO_OWNER + '/' + process.env.REPO_NAME + '/pulls/' + process.env.PR_NUMBER, {
                headers: {
                  'Authorization': 'token ' + process.env.GITHUB_TOKEN,
                  'Accept': 'application/vnd.github.v3+json'
                }
              });

              console.log('✅ PR data: \"' + (prData.title || 'No title') + '\"');

              const prompt = '# 大相撲アプリ コードレビュー (Claude 4 Sonnet)\\n\\nあなたは経験豊富なシニアエンジニアです。Claude 4 Sonnetの最新能力を活用して、以下のPRを徹底的にレビューしてください。\\n\\n## PR情報\\n- タイトル: ' + (prData.title || 'No title') + '\\n- 説明: ' + (prData.body || '説明なし') + '\\n- 変更ファイル数: ' + files.length + '\\n\\n## 変更内容\\n```diff\\n' + truncatedDiff + '\\n```\\n\\n## レビュー基準 (Claude 4 Sonnet強化版)\\n1. **コード品質**: TypeScript型安全性、可読性、保守性、設計パターン\\n2. **セキュリティ**: 入力値検証、XSS/CSRF対策、認証・認可、データ保護\\n3. **パフォーマンス**: 効率的なアルゴリズム、メモリ管理、レンダリング最適化\\n4. **テスト品質**: カバレッジ、エッジケース、統合テスト、E2Eテスト\\n5. **大相撲アプリ固有**: 力士データ整合性、番付表示正確性、相撲用語適切性、ルール準拠\\n6. **アーキテクチャ**: スケーラビリティ、拡張性、責務分離、依存関係\\n7. **ユーザビリティ**: UI/UX、アクセシビリティ、レスポンシブ対応\\n8. **運用**: ログ設計、監視可能性、デバッグ容易性\\n\\n## 判定基準 (厳格)\\n- **APPROVE**: 全ての品質基準を満たし、軽微な改善提案のみ\\n- **REQUEST_CHANGES**: 品質・セキュリティ・機能に修正必須の問題あり\\n- **COMMENT**: 設計の根本的な見直しや大規模な改善提案\\n\\n## 出力形式\\n最初の行に必ず: **DECISION: [APPROVE/REQUEST_CHANGES/COMMENT]**\\n\\nその後、以下の構造でレビュー:\\n### 🎯 総合判定理由\\n### ✅ 優秀な実装点\\n### ⚠️ 改善が必要な点 (優先度付き)\\n### 🔧 具体的な修正提案 (コード例付き)\\n### 📚 追加検討事項\\n\\nClaude 4 Sonnetの高度な分析能力を活用し、建設的で実用的なレビューを提供してください。';

              console.log('🤖 Requesting Claude 4 Sonnet review...');

              const response = await anthropic.messages.create({
                model: 'claude-sonnet-4-20250514',
                max_tokens: 3000,
                messages: [{ role: 'user', content: prompt }]
              });

              const reviewText = response.content[0].text;
              const decisionLine = reviewText.split('\\n').find(line => line.includes('DECISION:')) || reviewText.split('\\n')[0];
              
              let decision = 'COMMENT';
              if (decisionLine.includes('APPROVE')) decision = 'APPROVE';
              else if (decisionLine.includes('REQUEST_CHANGES')) decision = 'REQUEST_CHANGES';

              console.log('📋 Decision: ' + decision);

              const comment = '## 🤖 Claude 4 Sonnet AIレビュー\\n\\n' + reviewText + '\\n\\n---\\n### 📊 レビュー情報\\n- **AI モデル**: Claude 4 Sonnet (最新)\\n- **判定**: ' + decision + '\\n- **実行時刻**: ' + new Date().toISOString() + '\\n- **変更ファイル数**: ' + files.length + '\\n- **強化機能**: ✅ 高度なコード解析、セキュリティスキャン、アーキテクチャ評価\\n\\n*Claude 4 Sonnetによる最新AI自動レビュー*';

              await httpRequest('https://api.github.com/repos/' + process.env.REPO_OWNER + '/' + process.env.REPO_NAME + '/issues/' + process.env.PR_NUMBER + '/comments', {
                method: 'POST',
                headers: {
                  'Authorization': 'token ' + process.env.GITHUB_TOKEN,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ body: comment })
              });

              console.log('✅ Claude 4 Sonnet review posted successfully');
              
            } catch (error) {
              console.error('❌ Error:', error.message);
              
              try {
                await httpRequest('https://api.github.com/repos/' + process.env.REPO_OWNER + '/' + process.env.REPO_NAME + '/issues/' + process.env.PR_NUMBER + '/comments', {
                  method: 'POST',
                  headers: {
                    'Authorization': 'token ' + process.env.GITHUB_TOKEN,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ 
                    body: '## 🤖 Claude 4 Sonnet AIレビュー - エラー\\n\\nレビュー中にエラーが発生: `' + error.message + '`\\n\\n**対応**: 手動レビューをお願いします。' 
                  })
                });
              } catch (e) {
                console.error('Failed to post error comment:', e);
              }
              
              process.exit(1);
            }
          }

          review();
          "

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [test, claude-review-and-merge]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
