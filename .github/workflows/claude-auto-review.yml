name: Claude AI Auto Review & Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    outputs:
      test-status: ${{ steps.test-result.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        id: test-result
        run: |
          if npm test; then
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  claude-review-and-merge:
    runs-on: ubuntu-latest
    name: Claude AI Review & Auto Merge
    needs: test
    if: github.event_name == 'pull_request' && needs.test.outputs.test-status == 'passed'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.ts
            **/*.js
            **/*.tsx
            **/*.jsx
            **/*.json
            **/*.md

      - name: Setup Node.js for review script
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies for review
        run: |
          npm init -y
          npm install @anthropic-ai/sdk

      - name: Create review script
        run: |
          cat > claude-review.js << 'SCRIPT_EOF'
          const Anthropic = require('@anthropic-ai/sdk');
          const { execSync } = require('child_process');
          const https = require('https');

          async function httpRequest(url, options = {}) {
            return new Promise((resolve, reject) => {
              const urlObj = new URL(url);
              const requestOptions = {
                hostname: urlObj.hostname,
                port: urlObj.port || 443,
                path: urlObj.pathname + urlObj.search,
                method: options.method || 'GET',
                headers: options.headers || {}
              };

              const req = https.request(requestOptions, (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => {
                  try {
                    const parsed = JSON.parse(data);
                    resolve(parsed);
                  } catch (error) {
                    resolve({ body: data, statusCode: res.statusCode });
                  }
                });
              });

              req.on('error', reject);
              
              if (options.body) {
                req.write(options.body);
              }
              
              req.end();
            });
          }

          async function runClaudeReview() {
            try {
              const anthropic = new Anthropic({
                apiKey: process.env.ANTHROPIC_API_KEY,
              });

              const changedFiles = process.env.CHANGED_FILES?.split(' ') || [];
              
              if (changedFiles.length === 0) {
                console.log('No relevant files changed');
                return;
              }

              const gitDiff = execSync('git diff origin/main...HEAD', { encoding: 'utf8' });
              
              const prData = await httpRequest(
                `https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/pulls/${process.env.PR_NUMBER}`,
                {
                  method: 'GET',
                  headers: {
                    'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'User-Agent': 'claude-review-bot'
                  }
                }
              );

              const reviewPrompt = `
          # コードレビュー依頼

          以下のプルリクエストをレビューしてください。

          ## PR情報
          - タイトル: ${prData.title || 'No title'}
          - 説明: ${prData.body || '説明なし'}

          ## 変更内容
          ${gitDiff.substring(0, 3000)}

          ## レビュー観点
          1. コード品質
          2. TypeScript型安全性
          3. エラーハンドリング
          4. セキュリティ

          ## 出力形式
          最初の行に判定を出力：
          - **DECISION: APPROVE** （自動マージ可能）
          - **DECISION: REQUEST_CHANGES** （修正必要）
          - **DECISION: COMMENT** （人間確認必要）

          その後、レビュー内容を記載してください。
          `;

              const response = await anthropic.messages.create({
                model: 'claude-3-5-sonnet-20241022',
                max_tokens: 2000,
                messages: [{ role: 'user', content: reviewPrompt }]
              });

              const reviewComment = response.content[0].text;
              const lines = reviewComment.split('\n');
              const decisionLine = lines[0];
              
              let decision = 'COMMENT';
              if (decisionLine.includes('DECISION: APPROVE')) {
                decision = 'APPROVE';
              } else if (decisionLine.includes('DECISION: REQUEST_CHANGES')) {
                decision = 'REQUEST_CHANGES';
              }

              const commentBody = `## 🤖 Claude AIレビュー

          ${reviewComment}

          ---
          判定: ${decision} | 実行時刻: ${new Date().toISOString()}`;

              await httpRequest(
                `https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/issues/${process.env.PR_NUMBER}/comments`,
                {
                  method: 'POST',
                  headers: {
                    'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json',
                    'User-Agent': 'claude-review-bot'
                  },
                  body: JSON.stringify({ body: commentBody })
                }
              );

              console.log(`Review completed with decision: ${decision}`);
              
            } catch (error) {
              console.error('Error in Claude review:', error);
              process.exit(1);
            }
          }

          runClaudeReview();
          SCRIPT_EOF

      - name: Run Claude AI Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: node claude-review.js

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [test, claude-review-and-merge]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
