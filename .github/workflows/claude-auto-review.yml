name: Claude AI Auto Review & Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  # 既存のテストジョブ
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    outputs:
      test-status: ${{ steps.test-result.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        id: test-result
        run: |
          if npm test; then
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Claude AIレビュー＆自動マージジョブ
  claude-review-and-merge:
    runs-on: ubuntu-latest
    name: Claude AI Review & Auto Merge
    needs: test
    if: github.event_name == 'pull_request' && needs.test.outputs.test-status == 'passed'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.ts
            **/*.js
            **/*.tsx
            **/*.jsx
            **/*.json
            **/*.md

      - name: Setup Node.js for review script
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run Claude AI Review with Auto Decision
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          # まず必要なパッケージをインストール
          npm init -y
          npm install @anthropic-ai/sdk
          
          cat > claude-auto-review.js << 'EOF'
          const Anthropic = require('@anthropic-ai/sdk');
          const { execSync } = require('child_process');

          async function runClaudeAutoReview() {
            const anthropic = new Anthropic({
              apiKey: process.env.ANTHROPIC_API_KEY,
            });

            // 変更されたファイルの差分を取得
            const changedFiles = process.env.CHANGED_FILES?.split(' ') || [];
            
            if (changedFiles.length === 0) {
              console.log('No relevant files changed - auto approving');
              await approveAndMerge('変更対象ファイルなし');
              return;
            }

            // Git diffを取得
            const gitDiff = execSync('git diff origin/main...HEAD', { encoding: 'utf8' });
            
            // HTTPSライブラリを使用（fetch の代わり）
            const https = require('https');
            const httpRequest = (url, options) => {
              return new Promise((resolve, reject) => {
                const req = https.request(url, options, (res) => {
                  let data = '';
                  res.on('data', (chunk) => data += chunk);
                  res.on('end', () => {
                    try {
                      resolve(JSON.parse(data));
                    } catch (error) {
                      resolve({ body: data, statusCode: res.statusCode });
                    }
                  });
                });
                req.on('error', reject);
                if (options.body) {
                  req.write(options.body);
                }
                req.end();
              });
            };

            // PRの情報を取得
            const prData = await httpRequest(`https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/pulls/${process.env.PR_NUMBER}`, {
              method: 'GET',
              headers: {
                'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json',
                'User-Agent': 'claude-review-bot'
              }
            });

            // 過去のClaude レビューコメントを確認
            const comments = await httpRequest(`https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/issues/${process.env.PR_NUMBER}/comments`, {
              method: 'GET',
              headers: {
                'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json',
                'User-Agent': 'claude-review-bot'
              }
            });

            const claudeComments = comments.filter(comment => 
              comment.body && comment.body.includes('🤖 Claude AIレビュー')
            );

            // Claude にレビューを依頼（自動判定用プロンプト）
            const reviewPrompt = `
            # 自動レビュー＆マージ判定

            あなたは大相撲アプリのシニアエンジニアとして、以下のプルリクエストを自動レビューし、**マージ可否を明確に判定**してください。

            ## PR情報
            - タイトル: ${prData.title}
            - 説明: ${prData.body || '説明なし'}
            - 過去のレビュー回数: ${claudeComments.length}

            ## 変更内容（Git Diff）
            \`\`\`diff
            ${gitDiff}
            \`\`\`

            ## 必須出力形式

            最初の行に必ず以下のいずれかを出力してください：

            **DECISION: APPROVE**（自動マージ実行）
            **DECISION: REQUEST_CHANGES**（マージ拒否・修正要求）
            **DECISION: COMMENT**（人間による確認要求）

            その後、以下の形式でレビュー内容を続けてください：

            ### 🎯 判定理由
            [なぜこの判定になったかを具体的に説明]

            ### ✅ 良い点
            - [良い実装や改善点を具体的に]

            ### ⚠️ 改善提案・問題点
            - [改善すべき点を具体的に、コード例付きで]

            レビューは厳格に行い、品質を妥協しないでください。
            `;

            try {
              const response = await anthropic.messages.create({
                model: 'claude-3-5-sonnet-20241022',
                max_tokens: 4000,
                messages: [
                  {
                    role: 'user',
                    content: reviewPrompt
                  }
                ]
              });

              const reviewComment = response.content[0].text;
              const lines = reviewComment.split('\n');
              const decisionLine = lines[0];
              
              // 判定を解析
              let decision = 'COMMENT'; // デフォルト
              if (decisionLine.includes('DECISION: APPROVE')) {
                decision = 'APPROVE';
              } else if (decisionLine.includes('DECISION: REQUEST_CHANGES')) {
                decision = 'REQUEST_CHANGES';
              }

              // レビューコメントを投稿
              const commentBody = `## 🤖 Claude AIレビュー（自動判定）

${reviewComment}

---
### 🚀 自動処理結果
- **判定**: ${decision}
- **処理時刻**: ${new Date().toISOString()}
- **レビュー回数**: ${claudeComments.length + 1}回目

*このレビューはClaude AI（Max Plan）により自動生成・判定されました*`;

              await httpRequest(`https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/issues/${process.env.PR_NUMBER}/comments`, {
                method: 'POST',
                headers: {
                  'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.v3+json',
                  'Content-Type': 'application/json',
                  'User-Agent': 'claude-review-bot'
                },
                body: JSON.stringify({ body: commentBody })
              });

              console.log(`Claude review completed with decision: ${decision}`);
              
            } catch (error) {
              console.error('Error in Claude review:', error);
              process.exit(1);
            }
          }

          runClaudeAutoReview();
          EOF

          # 環境変数として変更ファイルを設定
          export CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          node claude-auto-review.js

  # マージ成功後の自動デプロイ
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [test, claude-review-and-merge]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
