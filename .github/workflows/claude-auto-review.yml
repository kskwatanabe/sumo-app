name: Claude AI Auto Review & Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    outputs:
      test-status: ${{ steps.test-result.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with detailed output
        id: test-result
        run: |
          echo "Running comprehensive test suite..."
          if npm test; then
            echo "✅ All tests passed successfully"
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Tests failed - see output above"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  claude-review-and-merge:
    runs-on: ubuntu-latest
    name: Claude AI Review & Auto Merge
    needs: test
    if: github.event_name == 'pull_request' && needs.test.outputs.test-status == 'passed'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files with details
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.ts
            **/*.js
            **/*.tsx
            **/*.jsx
            **/*.json
            **/*.md

      - name: Setup Node.js for review
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies for review
        run: |
          echo "Setting up review environment..."
          npm init -y
          npm install @anthropic-ai/sdk

      - name: Create comprehensive review script
        run: |
          cat > claude-review.js << 'SCRIPT_EOF'
          /**
           * Claude AI Code Review Script
           * Performs automated code review using Claude AI API
           * Includes comprehensive error handling and security measures
           */
          const Anthropic = require('@anthropic-ai/sdk');
          const { execSync } = require('child_process');
          const https = require('https');

          /**
           * Secure HTTPS request function with proper error handling
           * @param {string} url - Target URL
           * @param {object} options - Request options
           * @returns {Promise} - Response data
           */
          async function secureHttpRequest(url, options = {}) {
            return new Promise((resolve, reject) => {
              try {
                const urlObj = new URL(url);
                const requestOptions = {
                  hostname: urlObj.hostname,
                  port: urlObj.port || 443,
                  path: urlObj.pathname + urlObj.search,
                  method: options.method || 'GET',
                  headers: {
                    'User-Agent': 'claude-review-bot/1.0',
                    ...options.headers
                  },
                  // Security settings
                  rejectUnauthorized: true,
                  secureProtocol: 'TLSv1_2_method'
                };

                const req = https.request(requestOptions, (res) => {
                  let data = '';
                  
                  res.on('data', (chunk) => {
                    data += chunk;
                  });
                  
                  res.on('end', () => {
                    try {
                      if (res.statusCode >= 200 && res.statusCode < 300) {
                        const parsed = JSON.parse(data);
                        resolve(parsed);
                      } else {
                        reject(new Error(`HTTP ${res.statusCode}: ${data}`));
                      }
                    } catch (parseError) {
                      reject(new Error(`JSON Parse Error: ${parseError.message}`));
                    }
                  });
                });

                req.on('error', (error) => {
                  reject(new Error(`Request Error: ${error.message}`));
                });

                req.on('timeout', () => {
                  req.destroy();
                  reject(new Error('Request timeout'));
                });

                // Set timeout to 30 seconds
                req.setTimeout(30000);
                
                if (options.body) {
                  req.write(options.body);
                }
                
                req.end();
              } catch (error) {
                reject(new Error(`Request Setup Error: ${error.message}`));
              }
            });
          }

          /**
           * Main Claude AI review function
           * Validates environment, fetches PR data, and performs review
           */
          async function runClaudeReview() {
            try {
              console.log('🚀 Starting Claude AI review process...');
              
              // Validate required environment variables
              const requiredEnvVars = ['ANTHROPIC_API_KEY', 'GITHUB_TOKEN', 'PR_NUMBER', 'REPO_OWNER', 'REPO_NAME'];
              for (const envVar of requiredEnvVars) {
                if (!process.env[envVar]) {
                  throw new Error(`Missing required environment variable: ${envVar}`);
                }
              }

              // Initialize Anthropic client with error handling
              const anthropic = new Anthropic({
                apiKey: process.env.ANTHROPIC_API_KEY,
              });

              console.log('✅ Environment validated');

              // Get changed files
              const changedFiles = process.env.CHANGED_FILES?.split(' ') || [];
              console.log(`📁 Changed files: ${changedFiles.length} files`);
              
              if (changedFiles.length === 0) {
                console.log('ℹ️ No relevant files changed - posting informational comment');
                await postComment('## 🤖 Claude AIレビュー\n\n**結果**: 変更対象ファイルなし\n\n**判定**: APPROVE (自動承認)');
                return;
              }

              // Get comprehensive git diff (limit to prevent token overflow)
              console.log('📊 Analyzing code changes...');
              let gitDiff;
              try {
                gitDiff = execSync('git diff origin/main...HEAD', { 
                  encoding: 'utf8',
                  maxBuffer: 1024 * 1024 // 1MB limit
                });
              } catch (gitError) {
                console.error('Git diff error:', gitError.message);
                gitDiff = 'Error retrieving git diff: ' + gitError.message;
              }

              // Limit diff size for API
              const maxDiffSize = 8000; // Increased from 3000
              const truncatedDiff = gitDiff.length > maxDiffSize 
                ? gitDiff.substring(0, maxDiffSize) + '\n\n[... diff truncated for review ...]'
                : gitDiff;

              console.log(`📝 Diff size: ${gitDiff.length} chars (sending ${truncatedDiff.length} chars)`);

              // Fetch PR data with proper error handling
              console.log('📋 Fetching PR information...');
              const prData = await secureHttpRequest(
                `https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/pulls/${process.env.PR_NUMBER}`,
                {
                  method: 'GET',
                  headers: {
                    'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json'
                  }
                }
              );

              console.log(`✅ PR data fetched: "${prData.title}"`);

              // Enhanced review prompt
              const reviewPrompt = `# 大相撲アプリ自動コードレビュー

あなたは経験豊富なシニアエンジニアとして、以下のプルリクエストをレビューしてください。

## PR情報
- **タイトル**: ${prData.title || 'No title'}
- **作成者**: ${prData.user?.login || 'Unknown'}
- **説明**: ${prData.body || '説明なし'}
- **変更ファイル数**: ${changedFiles.length}

## 変更内容（Git Diff）
\`\`\`diff
${truncatedDiff}
\`\`\`

## レビュー基準
以下の観点で厳格にレビューしてください：

### 1. コード品質 (必須)
- TypeScript型安全性
- コードの可読性・保守性
- 命名規則の遵守
- 適切なコメント

### 2. セキュリティ (必須)
- 入力値検証
- XSS/CSRF対策
- 機密情報の適切な処理
- 依存関係の安全性

### 3. パフォーマンス
- 効率的なアルゴリズム
- メモリ使用量
- 不要な処理の回避

### 4. テスト
- テストカバレッジ
- エッジケースの考慮
- テストの品質

### 5. 大相撲アプリ固有
- 力士データの整合性
- 番付表示の正確性
- 相撲用語の適切な使用

## 判定基準
- **APPROVE**: 軽微な改善提案のみで、品質・セキュリティに問題なし
- **REQUEST_CHANGES**: 修正必須の問題あり（バグ、セキュリティ問題、重大な品質問題）
- **COMMENT**: 設計の相談や大きな改善提案

## 必須出力形式
最初の行に必ず以下を出力：

**DECISION: [APPROVE/REQUEST_CHANGES/COMMENT]**

その後、レビュー内容を記載してください。

レビューは建設的で、具体的な改善案を含めてください。`;

              console.log('🤖 Requesting Claude AI review...');
              
              // Request Claude AI review
              const response = await anthropic.messages.create({
                model: 'claude-3-5-sonnet-20241022',
                max_tokens: 3000,
                messages: [{ role: 'user', content: reviewPrompt }]
              });

              const reviewComment = response.content[0].text;
              console.log('✅ Claude AI review completed');

              // Parse decision
              const lines = reviewComment.split('\n');
              const decisionLine = lines.find(line => line.includes('DECISION:')) || lines[0];
              
              let decision = 'COMMENT'; // Default safe fallback
              if (decisionLine.includes('DECISION: APPROVE')) {
                decision = 'APPROVE';
              } else if (decisionLine.includes('DECISION: REQUEST_CHANGES')) {
                decision = 'REQUEST_CHANGES';
              }

              console.log(`📋 Review decision: ${decision}`);

              // Post comprehensive comment
              const commentBody = `## 🤖 Claude AIレビュー

${reviewComment}

---
### 📊 レビュー情報
- **判定**: ${decision}
- **実行時刻**: ${new Date().toISOString()}
- **変更ファイル数**: ${changedFiles.length}
- **レビュー対象**: ${changedFiles.slice(0, 5).join(', ')}${changedFiles.length > 5 ? ` (+${changedFiles.length - 5} more)` : ''}

*このレビューはClaude AI (Sonnet 3.5) により自動生成されました*`;

              await postComment(commentBody);
              console.log('✅ Review comment posted successfully');

              // Log final status
              console.log(`🎯 Review process completed with decision: ${decision}`);
              
            } catch (error) {
              console.error('❌ Critical error in Claude review:', error);
              
              // Post error comment for transparency
              try {
                await postComment(`## 🤖 Claude AIレビュー - エラー

レビュー中にエラーが発生しました：

\`\`\`
${error.message}
\`\`\`

**対応**: 手動レビューをお願いします。

*エラー時刻: ${new Date().toISOString()}*`);
              } catch (commentError) {
                console.error('Failed to post error comment:', commentError);
              }
              
              process.exit(1);
            }
          }

          /**
           * Posts a comment to the PR
           * @param {string} commentBody - Comment content
           */
          async function postComment(commentBody) {
            try {
              await secureHttpRequest(
                `https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/issues/${process.env.PR_NUMBER}/comments`,
                {
                  method: 'POST',
                  headers: {
                    'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ body: commentBody })
                }
              );
            } catch (error) {
              throw new Error(`Failed to post comment: ${error.message}`);
            }
          }

          // Execute main function
          runClaudeReview();
          SCRIPT_EOF

      - name: Execute Claude AI Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          echo "🚀 Starting Claude AI review execution..."
          node claude-review.js
          echo "✅ Claude AI review execution completed"

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [test, claude-review-and-merge]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
